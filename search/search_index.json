{"config":{"lang":["en"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"","title":"CodeIgniter Translatable Documentation","text":"<p>An in-model content translations for CodeIgniter 4 framework</p>"},{"location":"#requirements","title":"Requirements","text":""},{"location":"#table-of-contents","title":"Table of Contents","text":"<ul> <li>Installation</li> <li>Configuration</li> <li>Basic usage</li> <li>Model</li> <li>Entity</li> </ul>"},{"location":"basic_usage/","title":"Basic usage","text":""},{"location":"basic_usage/#defining-languages","title":"Defining languages","text":"<p>This library relies on settings from <code>Config\\App::defaultLocale</code> and <code>Config\\App::supportedLocales</code>.</p> <p>The current language is based on actual HTTP request.</p>"},{"location":"basic_usage/#tables-design","title":"Tables design","text":"<p>To easily describe how this library is working, we will use an example where we have articles with <code>title</code> and <code>content</code> fields that should be translated.</p> <p>We will need two tables:</p> <ul> <li> <p>Table <code>articles</code></p> <ul> <li><code>id</code></li> <li><code>author</code></li> <li><code>created_at</code></li> <li><code>updated_at</code></li> </ul> </li> <li> <p>Table <code>article_translations</code></p> <ul> <li><code>id</code></li> <li><code>article_id</code></li> <li><code>locale</code></li> <li><code>title</code></li> <li><code>content</code></li> </ul> </li> </ul> <p>Each table will have its own model.</p> <p>Note</p> <p>You can generate the skeleton for the translations based on the main table name. To do so use <code>php spark translatable:generate</code> command.</p> <p>For the details, please see: Generating the skeleton section in the configuration page.</p>"},{"location":"basic_usage/#defining-models","title":"Defining models","text":"<p>The main model should use <code>HasTranslations</code> trait and then the <code>initialize()</code> method should be used to initialize a library, like in the below example:</p> <pre><code>&lt;?php\n\nnamespace App\\Models;\n\n// ...\n\nclass ArticleModel extends Model\n{\n    use HasTranslations;\n\n    protected $table         = 'articles';\n    protected $primaryKey    = 'id';\n    protected $returnType    = Article::class;\n    protected $allowedFields = ['author'];\n    protected $useTimestamps = true;\n\n    // ...\n\n    protected function initialize(): void\n    {\n        $this-&gt;initTranslations(ArticleTranslationModel::class);\n    }\n\n    // ...\n}</code></pre> <p>Now the model with translations:</p> <pre><code>&lt;?php\n\nnamespace App\\Models;\n\n// ...\n\nclass ArticleTranslationModel extends Model\n{\n    protected $table         = 'article_translations';\n    protected $primaryKey    = 'id';\n    protected $returnType    = 'object';\n    protected $allowedFields = ['article_id', 'locale', 'title', 'content'];\n\n    // ...\n}</code></pre>"},{"location":"basic_usage/#defining-the-entity","title":"Defining the entity","text":"<p>Using the entity is not required but it might be handy. We use it only for the main model and it should use <code>TranslatableEntity</code> trait:</p> <pre><code>&lt;?php\n\nnamespace App\\Entities;\n\n// ...\n\nclass Article extends Entity\n{\n    use TranslatableEntity;\n\n    protected $datamap = [];\n    protected $dates   = ['created_at', 'updated_at'];\n    protected $casts   = [];\n\n\n}\n</code></pre>"},{"location":"basic_usage/#selecting-the-data","title":"Selecting the data","text":"<p>We will assume that our request locale is recognized as <code>en</code> and our <code>supportedLocalse</code> are set to <code>['en', 'pl', 'de']</code>.</p> <p>The usage will be very basic. The model will load only translations for the current locale (<code>en</code>):</p> <pre><code>$article = model(ArticleModel::class)-&gt;find(1);\n// will print author\necho $article-&gt;author;\n// will print \"en\" title\necho $article-&gt;translate()-&gt;title;</code></pre> <p>But we can also load all translations: <pre><code>$article = model(ArticleModel::class)-&gt;withAllTranslations()-&gt;find(1);\n// will print author\necho $article-&gt;author;\n// will print \"en\" title\necho $article-&gt;translate()-&gt;title;\n// will print \"en\" title\necho $article-&gt;translate('en')-&gt;title;\n// will print \"pl\" title\necho $article-&gt;translate('pl')-&gt;title;\n// will print \"de\" title\necho $article-&gt;translate('de')-&gt;title;</code></pre></p>"},{"location":"configuration/","title":"Configuration","text":"<ul> <li>Publishing the config file<ul> <li>$useFallbackLocale</li> <li>$fallbackLocale</li> <li>$fillWithEmpty</li> </ul> </li> <li>Generating the skeleton</li> </ul>"},{"location":"configuration/#publishing-the-config-file","title":"Publishing the config file","text":"<p>To make changes to the config file, we have to have our copy in the <code>app/Config/Translatable.php</code>. Luckily, this package comes with a handy command that will make this easy.</p> <p>When we run:</p> <pre><code>php spark translatable:publish</code></pre> <p>We will get our copy ready for modifications.</p>"},{"location":"configuration/#usefallbacklocale","title":"$useFallbackLocale","text":"<p>This allows us to decide whether to use fallback to locale functionality when given translation is not found. Default: <code>false</code>.</p>"},{"location":"configuration/#fallbacklocale","title":"$fallbackLocale","text":"<p>This allows us to set the desired fallback locale. You can leave it as <code>null</code> to follow the settings from <code>App::defaultLocale</code>. Default: <code>null</code></p>"},{"location":"configuration/#fillwithempty","title":"$fillWithEmpty","text":"<p>This allows us to decide whether we should fill empty values when translation is not found. Default: <code>false</code>.</p>"},{"location":"configuration/#generating-the-skeleton","title":"Generating the skeleton","text":"<p>You can generate the skeleton for your translatable models. To do so, you have to use command:</p> <pre><code>php spark translatable:generate</code></pre> <p>You have to provide a main table name as a parameter.</p> <p>If we use: <code>php spark translatable:generate articles</code>, then it will generate:</p> <ul> <li><code>ArticlesWithTranslations</code> migration class which you can supplement with missing data for your use case</li> <li><code>ArticleModel</code> class (you should complete the <code>$allowedFields</code> parameter)</li> <li><code>ArticleTranslationModel</code> class (you should complete the <code>$allowedFields</code> parameter)</li> <li><code>Article</code> entity class</li> </ul>"},{"location":"entity/","title":"Entity","text":"<p>When the <code>TranslatableEntity</code> trait is used, the entity receives new methods.</p>"},{"location":"entity/#methods","title":"Methods","text":""},{"location":"entity/#translate","title":"translate()","text":"<p>By default, will return the translation for the current request locale.</p> <pre><code>$article = model(ArticleModel::class)-&gt;withAllTranslations()-&gt;find(1);\n// will return title for \"en\" locale\n$article-&gt;translate()-&gt;title;\n// will return title for \"pl\" locale\n$article-&gt;translate('pl')-&gt;title;</code></pre>"},{"location":"entity/#hastranslation","title":"hasTranslation()","text":"<p>Checks if given locale is available.</p> <pre><code>$article = model(ArticleModel::class)-&gt;withAllTranslations()-&gt;find(1);\n// will return: true\n$article-&gt;hasTranslation('en');</code></pre>"},{"location":"entity/#gettranslationkeys","title":"getTranslationKeys()","text":"<p>Returns available translations keys.</p> <pre><code>$article = model(ArticleModel::class)-&gt;withAllTranslations()-&gt;find(1);\n// will return: ['en', 'pl']\n$article-&gt;getTranslationKeys();</code></pre>"},{"location":"entity/#working-with-translations","title":"Working with translations","text":"<pre><code>$articleModel = model(ArticleModel::class);\n/** @var Article $article */\n$article = $articleModel\n    -&gt;withAllTranslations()\n    -&gt;find(1);\n\n$article-&gt;translate()-&gt;title = 'Updated sample title';\n$article-&gt;translate('pl')-&gt;title = 'Zaktualizowany tytu\u0142';\n\n$articleModel-&gt;save($article);</code></pre>"},{"location":"installation/","title":"Installation","text":"<ul> <li>Composer Installation</li> <li>Manual Installation</li> </ul>"},{"location":"installation/#composer-installation","title":"Composer Installation","text":"<p>The only thing you have to do is to run this command, and you're ready to go.</p> <pre><code>composer require michalsn/codeigniter-translatable</code></pre>"},{"location":"installation/#manual-installation","title":"Manual Installation","text":"<p>In the example below we will assume that files from this project will be located in <code>app/ThirdParty/translatable</code> directory.</p> <p>Download this project and then enable it by editing the <code>app/Config/Autoload.php</code> file and adding the <code>Michalsn\\CodeIgniterTranslatable</code> namespace to the <code>$psr4</code> array, like in the below example:</p> <pre><code>&lt;?php\n\n// ...\n\npublic $psr4 = [\n    APP_NAMESPACE =&gt; APPPATH, // For custom app namespace\n    'Michalsn\\CodeIgniterTranslatable' =&gt; APPPATH . 'ThirdParty/translatable/src',\n];\n\n// ...\n</code></pre>"},{"location":"model/","title":"Model","text":"<p>When the <code>HasTransactions</code> trait is used, the model receives new methods.</p>"},{"location":"model/#query-methods","title":"Query methods","text":""},{"location":"model/#withalltranslations","title":"withAllTranslations()","text":"<p>Will load all translations for model.</p> <pre><code>model(ArticleModel::class)-&gt;withAllTranslations()-&gt;find(1);</code></pre>"},{"location":"model/#withtranslations","title":"withTranslations()","text":"<p>Will load only given translations from the parameter.</p> <pre><code>model(ArticleModel::class)-&gt;withTranslations(['en', 'pl'])-&gt;find(1);</code></pre>"},{"location":"model/#usefallbacklocale","title":"useFallbackLocale()","text":"<p>While this option can be set globally via the config file, here you can change the setting only for a given query.</p> <p>When given translation is not found it will fall back to the <code>$fallbackLocale</code>.</p> <pre><code>// if no \"pl\" translation is found, it will fall back\n// to the locale recognized in the request\nmodel(ArticleModel::class)\n    -&gt;useFallbackLocale()\n    -&gt;withTranslations(['pl'])\n    -&gt;find(1);</code></pre>"},{"location":"model/#setfallbacklocale","title":"setFallbackLocale()","text":"<p>While this option can be set globally via the config file, here you can change the setting only for a given query.</p> <p>We can set manually what locale will be used when the given translation is not found.</p> <pre><code>// if no \"pl\" translation is found, it will fall back to \"en\"\nmodel(ArticleModel::class)\n    -&gt;setFallbackLocale('en')\n    -&gt;withTranslations(['pl'])\n    -&gt;find(1);</code></pre>"},{"location":"model/#usefillonempty","title":"useFillOnEmpty()","text":"<p>While this option can be set globally via the config file, here you can change the setting only for a given query.</p> <p>When the translation is not found, we may want to return an empty object with properties.</p> <pre><code>// if no \"pl\" translation is found, it will fall back to an empty object\nmodel(ArticleModel::class)\n    -&gt;useFillOnEmpty()\n    -&gt;withTranslations(['pl'])\n    -&gt;find(1);</code></pre>"},{"location":"model/#search-methods","title":"Search methods","text":""},{"location":"model/#wheretranslation","title":"whereTranslation()","text":"<p>This works like normal <code>where()</code> method, but relates to the translated content only.</p> <pre><code>model(ArticleModel::class)\n    -&gt;whereTranslation('title', 'Sample 1')\n    -&gt;find(1);</code></pre>"},{"location":"model/#orwheretranslation","title":"orWhereTranslation()","text":"<p>This works like normal <code>orWhere()</code> method, but relates to the translated content only.</p> <pre><code>model(ArticleModel::class)\n    -&gt;whereTranslation('title', 'Sample 1')\n    -&gt;orWhereTranslation('title', 'Sample 2')\n    -&gt;find(1);</code></pre>"},{"location":"model/#whereintranslation","title":"whereInTranslation()","text":"<p>This works like normal <code>whereIn()</code> method, but relates to the translated content only.</p> <pre><code>model(ArticleModel::class)\n    -&gt;whereInTranslation('title', ['Sample 1', 'Sample 2'])\n    -&gt;find(1);</code></pre>"},{"location":"model/#wherenotintranslation","title":"whereNotInTranslation()","text":"<p>This works like normal <code>whereNotIn()</code> method, but relates to the translated content only.</p> <pre><code>model(ArticleModel::class)\n    -&gt;whereNotInTranslation('title', ['Sample 1', 'Sample 2'])\n    -&gt;find(1);</code></pre>"},{"location":"model/#liketranslation","title":"likeTranslation()","text":"<p>This works like normal <code>like()</code> method, but relates to the translated content only.</p> <pre><code>model(ArticleModel::class)\n    -&gt;likeTranslation('title', 'Sample', 'after')\n    -&gt;find(1);</code></pre>"},{"location":"model/#orliketranslation","title":"orLikeTranslation()","text":"<p>This works like normal <code>orLike()</code> method, but relates to the translated content only.</p> <pre><code>model(ArticleModel::class)\n    -&gt;likeTranslation('title', 'Sample 1')\n    -&gt;orLikeTranslation('title', 'Sample 2')\n    -&gt;find(1);</code></pre>"},{"location":"model/#notliketranslation","title":"notLikeTranslation()","text":"<p>This works like normal <code>orLike()</code> method, but relates to the translated content only.</p> <pre><code>model(ArticleModel::class)\n    -&gt;notLikeTranslation('title', 'Sample 1')\n    -&gt;find(1);</code></pre>"},{"location":"model/#ornotliketranslation","title":"orNotLikeTranslation()","text":"<p>This works like normal <code>orNotLike()</code> method, but relates to the translated content only.</p> <pre><code>model(ArticleModel::class)\n    -&gt;notLikeTranslation('title', 'Sample 1')\n    -&gt;orNotLikeTranslation('title', 'Sample 2')\n    -&gt;find(1);</code></pre>"},{"location":"model/#working-with-result-data","title":"Working with result data","text":"<p>The translated content is always available via the property or array key with name <code>translations</code>.</p> <pre><code>$article = model(ArticleModel::class)\n    -&gt;asArray()\n    -&gt;withAllTranslations()\n    -&gt;find(1);\n\n// will return:\n[\n    'id'           =&gt; '1',\n    'author'       =&gt; 'Sample user 1'\n    'created_at'   =&gt; '...',\n    'updated_at'   =&gt; '...',\n    'translations' =&gt; [\n        'en' =&gt; (object) [\n            'title'   =&gt; 'Sample 1',\n            'content' =&gt; 'Content 1',\n        ],\n        'pl' =&gt; (object) [\n            'title'   =&gt; 'Przyk\u0142ad 1',\n            'content' =&gt; 'Tre\u015b\u0107 1',\n        ],\n    ]\n];</code></pre> <p>The only difference is when we use the entity with <code>TranslatableEntity</code> trait. Then we have some helpful methods that make working with translations more comfortable. You can read about it here.</p>"},{"location":"model/#inserting-updating-the-data","title":"Inserting / Updating the data","text":"<p>As long as you will stick to the returned structure, you can also update or insert the whole model at once. Translations will be updated automatically - as long as locale keys are listed in the <code>Config\\App::supportedLocales</code> array.</p> <pre><code>$articleModel = model(ArticleModel::class);\n$article      = $articleModel\n    -&gt;asArray()\n    -&gt;withAllTranslations()\n    -&gt;find(1);\n\n$article['translations']['en']-&gt;title = 'Updated sample';\n\n$articleModel-&gt;save($article);\n</code></pre>"}]}